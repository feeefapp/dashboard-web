{
  "sksl": {
    "entrypoint": "liquid_glass_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float uSizeW;\nuniform float uSizeH;\nuniform float uChromaticAberration = 0.0;\nuniform float uGlassColorR;\nuniform float uGlassColorG;\nuniform float uGlassColorB;\nuniform float uGlassColorA;\nuniform float uLightAngle = 0.785398006439208984375;\nuniform float uLightIntensity = 1.0;\nuniform float uAmbientStrength = 0.100000001490116119384765625;\nuniform float uThickness;\nuniform float uRefractiveIndex = 1.2000000476837158203125;\nuniform float uShape1Type;\nuniform float uShape1CenterX;\nuniform float uShape1CenterY;\nuniform float uShape1SizeW;\nuniform float uShape1SizeH;\nuniform float uShape1CornerRadius;\nuniform float uShape2Type;\nuniform float uShape2CenterX;\nuniform float uShape2CenterY;\nuniform float uShape2SizeW;\nuniform float uShape2SizeH;\nuniform float uShape2CornerRadius;\nuniform float uShape3Type;\nuniform float uShape3CenterX;\nuniform float uShape3CenterY;\nuniform float uShape3SizeW;\nuniform float uShape3SizeH;\nuniform float uShape3CornerRadius;\nuniform float uBlend;\nuniform shader uBackgroundTexture;\nuniform half2 uBackgroundTexture_size;\n\nvec4 fragColor;\n\nvec2 uSize;\nvec4 uGlassColor;\nvec2 uShape1Center;\nvec2 uShape1Size;\nvec2 uShape2Center;\nvec2 uShape2Size;\nvec2 uShape3Center;\nvec2 uShape3Size;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_sdfSquircle(vec2 p, vec2 b, inout float r, float n)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    return (min(max(q.x, q.y), 0.0) + pow(pow(max(q.x, 0.0), n) + pow(max(q.y, 0.0), n), 1.0 / n)) - r;\n}\n\nfloat FLT_flutter_local_sdfEllipse(vec2 p, inout vec2 r)\n{\n    r = max(r, vec2(9.9999997473787516355514526367188e-05));\n    float k1 = length(p / r);\n    float k2 = length(p / (r * r));\n    return (k1 * (k1 - 1.0)) / max(k2, 9.9999997473787516355514526367188e-05);\n}\n\nfloat FLT_flutter_local_sdfRRect(vec2 p, vec2 b, inout float r)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    return (min(max(q.x, q.y), 0.0) + length(max(q, vec2(0.0)))) - r;\n}\n\nfloat FLT_flutter_local_getShapeSDF(float type, vec2 p, vec2 center, vec2 size, float r)\n{\n    if (type == 1.0)\n    {\n        vec2 param = p - center;\n        vec2 param_1 = size / vec2(2.0);\n        float param_2 = r;\n        float param_3 = 2.0;\n        float _275 = FLT_flutter_local_sdfSquircle(param, param_1, param_2, param_3);\n        return _275;\n    }\n    if (type == 2.0)\n    {\n        vec2 param_4 = p - center;\n        vec2 param_5 = size / vec2(2.0);\n        float _289 = FLT_flutter_local_sdfEllipse(param_4, param_5);\n        return _289;\n    }\n    if (type == 3.0)\n    {\n        vec2 param_6 = p - center;\n        vec2 param_7 = size / vec2(2.0);\n        float param_8 = r;\n        float _306 = FLT_flutter_local_sdfRRect(param_6, param_7, param_8);\n        return _306;\n    }\n    return 1000000000.0;\n}\n\nfloat FLT_flutter_local_smoothUnion(float d1, float d2, float k)\n{\n    float e = max(k - abs(d1 - d2), 0.0);\n    return min(d1, d2) - (((e * e) * 0.25) / k);\n}\n\nfloat FLT_flutter_local_sceneSDF(vec2 p)\n{\n    float param = uShape1Type;\n    vec2 param_1 = p;\n    vec2 param_2 = uShape1Center;\n    vec2 param_3 = uShape1Size;\n    float param_4 = uShape1CornerRadius;\n    float d1 = FLT_flutter_local_getShapeSDF(param, param_1, param_2, param_3, param_4);\n    float param_5 = uShape2Type;\n    vec2 param_6 = p;\n    vec2 param_7 = uShape2Center;\n    vec2 param_8 = uShape2Size;\n    float param_9 = uShape2CornerRadius;\n    float d2 = FLT_flutter_local_getShapeSDF(param_5, param_6, param_7, param_8, param_9);\n    float param_10 = uShape3Type;\n    vec2 param_11 = p;\n    vec2 param_12 = uShape3Center;\n    vec2 param_13 = uShape3Size;\n    float param_14 = uShape3CornerRadius;\n    float d3 = FLT_flutter_local_getShapeSDF(param_10, param_11, param_12, param_13, param_14);\n    float param_15 = d1;\n    float param_16 = d2;\n    float param_17 = uBlend;\n    float param_18 = FLT_flutter_local_smoothUnion(param_15, param_16, param_17);\n    float param_19 = d3;\n    float param_20 = uBlend;\n    return FLT_flutter_local_smoothUnion(param_18, param_19, param_20);\n}\n\nvec3 FLT_flutter_local_getNormal(float sd, float thickness)\n{\n    float dx = dFdx(sd);\n    float dy = dFdy(sd);\n    float n_cos = max(thickness + sd, 0.0) / thickness;\n    float n_sin = sqrt(max(0.0, 1.0 - (n_cos * n_cos)));\n    return normalize(vec3(dx * n_cos, dy * n_cos, n_sin));\n}\n\nfloat FLT_flutter_local_getHeight(float sd, float thickness)\n{\n    if ((sd >= 0.0) || (thickness <= 0.0))\n    {\n        return 0.0;\n    }\n    if (sd < (-thickness))\n    {\n        return thickness;\n    }\n    float x = thickness + sd;\n    return sqrt(max(0.0, (thickness * thickness) - (x * x)));\n}\n\nvec3 FLT_flutter_local_calculateLighting(vec2 uv, vec3 normal, float height, vec2 refractionDisplacement, float thickness)\n{\n    float _434;\n    if (thickness > 0.0)\n    {\n        _434 = height / thickness;\n    }\n    else\n    {\n        _434 = 0.0;\n    }\n    float normalizedHeight = _434;\n    float shape = smoothstep(0.0, 0.89999997615814208984375, 1.0 - normalizedHeight);\n    if (shape < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    vec3 viewDir = vec3(0.0, 0.0, 1.0);\n    float fresnel = pow(1.0 - max(0.0, dot(normal, viewDir)), 3.0);\n    vec3 rimLight = vec3((fresnel * uAmbientStrength) * 0.5);\n    vec3 lightDir = normalize(vec3(cos(uLightAngle), sin(uLightAngle), -0.699999988079071044921875));\n    vec3 oppositeLightDir = normalize(vec3(-lightDir.xy, lightDir.z));\n    vec3 halfwayDir1 = normalize(lightDir + viewDir);\n    float specDot1 = max(0.0, dot(normal, halfwayDir1));\n    vec3 halfwayDir2 = normalize(oppositeLightDir + viewDir);\n    float specDot2 = max(0.0, dot(normal, halfwayDir2));\n    vec3 reflectedColor = vec3(1.0);\n    if (length(normal.xy) > 0.001000000047497451305389404296875)\n    {\n        vec2 reflectionDir = normalize(normal.xy);\n        vec2 baseSampleUV = uv + ((reflectionDir * 300.0) / uSize);\n        vec2 blurOffset = vec2(10.0) / uSize;\n        vec3 sampledColor = vec3(0.0);\n        sampledColor += uBackgroundTexture.eval(uBackgroundTexture_size * ( baseSampleUV + (blurOffset * vec2(1.0)))).xyz;\n        sampledColor += uBackgroundTexture.eval(uBackgroundTexture_size * ( baseSampleUV + (blurOffset * vec2(-1.0, 1.0)))).xyz;\n        sampledColor += uBackgroundTexture.eval(uBackgroundTexture_size * ( baseSampleUV + (blurOffset * vec2(1.0, -1.0)))).xyz;\n        sampledColor += uBackgroundTexture.eval(uBackgroundTexture_size * ( baseSampleUV + (blurOffset * vec2(-1.0)))).xyz;\n        reflectedColor = sampledColor / vec3(4.0);\n    }\n    float glintExponent = mix(350.0, 512.0, smoothstep(5.0, 25.0, uThickness));\n    float sharpFactor = pow(specDot1, glintExponent) + pow(specDot2, glintExponent * 1.2000000476837158203125);\n    vec3 whiteGlint = (vec3(sharpFactor) * uLightIntensity) * 2.5;\n    vec3 sharpGlint = whiteGlint * reflectedColor;\n    float displacementMag = length(refractionDisplacement);\n    float internalIntensity = smoothstep(5.0, 40.0, displacementMag);\n    float softFactor = pow(specDot1, 32.0) + pow(specDot2, 32.0);\n    vec3 softBleed = (vec3(softFactor) * uLightIntensity) * 0.800000011920928955078125;\n    float reflectionFresnel = pow(1.0 - max(0.0, dot(normal, viewDir)), 3.0);\n    float reflectionIntensity = 0.100000001490116119384765625 + (reflectionFresnel * 0.5);\n    vec3 environmentReflection = reflectedColor * reflectionIntensity;\n    vec3 lighting = ((rimLight + sharpGlint) + (softBleed * internalIntensity)) + environmentReflection;\n    return lighting * shape;\n}\n\nvoid FLT_main()\n{\n    uSize = vec2(uSizeW, uSizeH);\n    uGlassColor = vec4(uGlassColorR, uGlassColorG, uGlassColorB, uGlassColorA);\n    uShape1Center = vec2(uShape1CenterX, uShape1CenterY);\n    uShape1Size = vec2(uShape1SizeW, uShape1SizeH);\n    uShape2Center = vec2(uShape2CenterX, uShape2CenterY);\n    uShape2Size = vec2(uShape2SizeW, uShape2SizeH);\n    uShape3Center = vec2(uShape3CenterX, uShape3CenterY);\n    uShape3Size = vec2(uShape3SizeW, uShape3SizeH);\n    vec2 screenUV = FLT_flutter_local_FlutterFragCoord() / uSize;\n    vec2 p = FLT_flutter_local_FlutterFragCoord();\n    vec2 param = p;\n    float sd = FLT_flutter_local_sceneSDF(param);\n    float alpha = smoothstep(-4.0, 0.0, sd);\n    if (alpha > 0.999000012874603271484375)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV));\n        return;\n    }\n    if (uThickness < 0.00999999977648258209228515625)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV));\n        return;\n    }\n    float param_1 = sd;\n    float param_2 = uThickness;\n    vec3 normal_1 = FLT_flutter_local_getNormal(param_1, param_2);\n    float param_3 = sd;\n    float param_4 = uThickness;\n    float height_1 = FLT_flutter_local_getHeight(param_3, param_4);\n    float baseHeight = uThickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    vec2 refractionDisplacement_1;\n    vec4 refractColor;\n    if (uChromaticAberration > 0.001000000047497451305389404296875)\n    {\n        float iorR = uRefractiveIndex - (uChromaticAberration * 0.039999999105930328369140625);\n        float iorG = uRefractiveIndex;\n        float iorB = uRefractiveIndex + (uChromaticAberration * 0.07999999821186065673828125);\n        vec3 refractVecR = refract(incident, normal_1, 1.0 / iorR);\n        float refractLengthR = (height_1 + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecR.z));\n        vec2 refractedUVR = screenUV + ((refractVecR.xy * refractLengthR) / uSize);\n        float red = uBackgroundTexture.eval(uBackgroundTexture_size * ( refractedUVR)).x;\n        vec3 refractVecG = refract(incident, normal_1, 1.0 / iorG);\n        float refractLengthG = (height_1 + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecG.z));\n        refractionDisplacement_1 = refractVecG.xy * refractLengthG;\n        vec2 refractedUVG = screenUV + (refractionDisplacement_1 / uSize);\n        vec4 greenSample = uBackgroundTexture.eval(uBackgroundTexture_size * ( refractedUVG));\n        float green = greenSample.y;\n        float bgAlpha = greenSample.w;\n        vec3 refractVecB = refract(incident, normal_1, 1.0 / iorB);\n        float refractLengthB = (height_1 + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecB.z));\n        vec2 refractedUVB = screenUV + ((refractVecB.xy * refractLengthB) / uSize);\n        float blue = uBackgroundTexture.eval(uBackgroundTexture_size * ( refractedUVB)).z;\n        refractColor = vec4(red, green, blue, bgAlpha);\n    }\n    else\n    {\n        vec3 refractVec = refract(incident, normal_1, 1.0 / uRefractiveIndex);\n        float refractLength = (height_1 + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVec.z));\n        refractionDisplacement_1 = refractVec.xy * refractLength;\n        vec2 refractedUV = screenUV + (refractionDisplacement_1 / uSize);\n        refractColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( refractedUV));\n    }\n    vec4 reflectColor = vec4(0.0);\n    float reflectionIntensity_1 = clamp(abs(refractionDisplacement_1.x - refractionDisplacement_1.y) * 0.001000000047497451305389404296875, 0.0, 0.300000011920928955078125);\n    reflectColor = vec4(reflectionIntensity_1, reflectionIntensity_1, reflectionIntensity_1, 0.0);\n    vec4 liquidColor = mix(refractColor, reflectColor, vec4((1.0 - normal_1.z) * 0.20000000298023223876953125));\n    vec2 param_5 = screenUV;\n    vec3 param_6 = normal_1;\n    float param_7 = height_1;\n    vec2 param_8 = refractionDisplacement_1;\n    float param_9 = uThickness;\n    vec3 lighting_1 = FLT_flutter_local_calculateLighting(param_5, param_6, param_7, param_8, param_9);\n    vec4 finalColor = liquidColor;\n    if (uGlassColor.w > 0.0)\n    {\n        float glassLuminance = dot(uGlassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (uGlassColor.xyz * 2.0);\n            vec3 _942 = mix(liquidColor.xyz, darkened, vec3(uGlassColor.w));\n            finalColor.x = _942.x;\n            finalColor.y = _942.y;\n            finalColor.z = _942.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - uGlassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _969 = mix(liquidColor.xyz, screened, vec3(uGlassColor.w));\n            finalColor.x = _969.x;\n            finalColor.y = _969.y;\n            finalColor.z = _969.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    vec4 _980 = finalColor;\n    vec3 _982 = _980.xyz + lighting_1;\n    finalColor.x = _982.x;\n    finalColor.y = _982.y;\n    finalColor.z = _982.z;\n    vec4 originalBgColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV));\n    float falloff = (clamp(length(refractionDisplacement_1) / 100.0, 0.0, 1.0) * 0.100000001490116119384765625) + 0.89999997615814208984375;\n    vec4 falloffColor = mix(vec4(0.0), originalBgColor, vec4(falloff));\n    finalColor = clamp(finalColor, vec4(0.0), vec4(1.0));\n    falloffColor = clamp(falloffColor, vec4(0.0), vec4(1.0));\n    vec4 backgroundColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV));\n    fragColor = mix(backgroundColor, finalColor, vec4(1.0 - alpha));\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBackgroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uSizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uChromaticAberration",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uGlassColorR",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uGlassColorG",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uGlassColorB",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uGlassColorA",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uLightAngle",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uLightIntensity",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "uAmbientStrength",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "uThickness",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 11,
        "name": "uRefractiveIndex",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 12,
        "name": "uShape1Type",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 13,
        "name": "uShape1CenterX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 14,
        "name": "uShape1CenterY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 15,
        "name": "uShape1SizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 16,
        "name": "uShape1SizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 17,
        "name": "uShape1CornerRadius",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 18,
        "name": "uShape2Type",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 19,
        "name": "uShape2CenterX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 20,
        "name": "uShape2CenterY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 21,
        "name": "uShape2SizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 22,
        "name": "uShape2SizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 23,
        "name": "uShape2CornerRadius",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 24,
        "name": "uShape3Type",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 25,
        "name": "uShape3CenterX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 26,
        "name": "uShape3CenterY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 27,
        "name": "uShape3SizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 28,
        "name": "uShape3SizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 29,
        "name": "uShape3CornerRadius",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 30,
        "name": "uBlend",
        "rows": 1,
        "type": 10
      }
    ]
  }
}